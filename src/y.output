Terminals unused in grammar

    COLON
    DOT
    BITAND
    NOT
    BITNOT
    MOD
    BITXOR
    BITOR
    INTERROGATION


State 56 conflicts: 12 shift/reduce
State 63 conflicts: 12 shift/reduce
State 64 conflicts: 12 shift/reduce
State 65 conflicts: 12 shift/reduce
State 66 conflicts: 12 shift/reduce
State 67 conflicts: 12 shift/reduce
State 68 conflicts: 12 shift/reduce
State 69 conflicts: 12 shift/reduce
State 70 conflicts: 12 shift/reduce
State 71 conflicts: 12 shift/reduce
State 72 conflicts: 12 shift/reduce
State 73 conflicts: 12 shift/reduce
State 74 conflicts: 12 shift/reduce
State 101 conflicts: 12 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmlist

    2 stmlist: stm
    3        | stmlist stm

    4 stm: fundec
    5    | vardec SEMICOLON
    6    | exp SEMICOLON
    7    | RETURN SEMICOLON
    8    | RETURN exp SEMICOLON
    9    | BREAK SEMICOLON
   10    | IF LPARENT exp RPARENT block
   11    | IF LPARENT exp RPARENT block ELSE block
   12    | WHILE LPARENT exp RPARENT block
   13    | FOR LPARENT exp RPARENT block

   14 block: LBRACE stmlist RBRACE
   15      | LBRACE RBRACE

   16 vardec: identifier identifier
   17       | identifier identifier ASSIGN exp
   18       | identifier identifier LBRACKET INTEGER RBRACKET

   19 fundec: identifier identifier LPARENT fun_args RPARENT block

   20 fun_args: ε
   21         | fun_args COMMA vardec
   22         | vardec

   23 identifier: IDENTIFIER

   24 constant: INTEGER
   25         | REAL
   26         | CHAR
   27         | STRING

   28 call_args: ε
   29          | exp
   30          | call_args COMMA exp

   31 exp: identifier ASSIGN exp
   32    | identifier '(' call_args ')'
   33    | exp PLUS exp
   34    | exp MINUS exp
   35    | exp MUL exp
   36    | exp DIV exp
   37    | exp AND exp
   38    | exp OR exp
   39    | exp LE exp
   40    | exp GE exp
   41    | exp EQ exp
   42    | exp NE exp
   43    | exp LT exp
   44    | exp GT exp
   45    | identifier LBRACKET exp RBRACKET
   46    | identifier LBRACKET exp RBRACKET ASSIGN exp
   47    | identifier
   48    | '*' identifier
   49    | '*' identifier '[' exp ']'
   50    | constant
   51    | LPARENT exp RPARENT


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 32
    ')' (41) 32
    '*' (42) 48 49
    '[' (91) 49
    ']' (93) 49
    error (256)
    BREAK (258) 9
    ELSE (259) 11
    IF (260) 10 11
    RETURN (261) 7 8
    WHILE (262) 12
    FOR (263) 13
    AND (264) 37
    OR (265) 38
    LE (266) 39
    GE (267) 40
    EQ (268) 41
    NE (269) 42
    SEMICOLON (270) 5 6 7 8 9
    LBRACE (271) 14 15
    RBRACE (272) 14 15
    COMMA (273) 21 30
    COLON (274)
    ASSIGN (275) 17 31 46
    LPARENT (276) 10 11 12 13 19 51
    RPARENT (277) 10 11 12 13 19 51
    LBRACKET (278) 18 45 46
    RBRACKET (279) 18 45 46
    DOT (280)
    BITAND (281)
    NOT (282)
    BITNOT (283)
    PLUS (284) 33
    MINUS (285) 34
    MUL (286) 35
    DIV (287) 36
    MOD (288)
    LT (289) 43
    GT (290) 44
    BITXOR (291)
    BITOR (292)
    INTERROGATION (293)
    INTEGER <iVal> (294) 18 24
    IDENTIFIER <iVal> (295) 23
    REAL <dVal> (296) 25
    CHAR <cVal> (297) 26
    STRING <sVal> (298) 27


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    program <block> (50)
        on left: 1
        on right: 0
    stmlist <block> (51)
        on left: 2 3
        on right: 1 3 14
    stm <stm> (52)
        on left: 4 5 6 7 8 9 10 11 12 13
        on right: 2 3
    block <block> (53)
        on left: 14 15
        on right: 10 11 12 13 19
    vardec <stm> (54)
        on left: 16 17 18
        on right: 5 21 22
    fundec <stm> (55)
        on left: 19
        on right: 4
    fun_args <vardeclist> (56)
        on left: 20 21 22
        on right: 19 21
    identifier <identifier> (57)
        on left: 23
        on right: 16 17 18 19 31 32 45 46 47 48 49
    constant <exp> (58)
        on left: 24 25 26 27
        on right: 50
    call_args <explist> (59)
        on left: 28 29 30
        on right: 30 32
    exp <exp> (60)
        on left: 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
        on right: 6 8 10 11 12 13 17 29 30 31 33 34 35 36 37 38 39 40 41 42 43 44 45 46 49 51


State 0

    0 $accept: • program $end

    BREAK       shift, and go to state 1
    IF          shift, and go to state 2
    RETURN      shift, and go to state 3
    WHILE       shift, and go to state 4
    FOR         shift, and go to state 5
    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    program     go to state 13
    stmlist     go to state 14
    stm         go to state 15
    vardec      go to state 16
    fundec      go to state 17
    identifier  go to state 18
    constant    go to state 19
    exp         go to state 20


State 1

    9 stm: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 21


State 2

   10 stm: IF • LPARENT exp RPARENT block
   11    | IF • LPARENT exp RPARENT block ELSE block

    LPARENT  shift, and go to state 22


State 3

    7 stm: RETURN • SEMICOLON
    8    | RETURN • exp SEMICOLON

    SEMICOLON   shift, and go to state 23
    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 25


State 4

   12 stm: WHILE • LPARENT exp RPARENT block

    LPARENT  shift, and go to state 26


State 5

   13 stm: FOR • LPARENT exp RPARENT block

    LPARENT  shift, and go to state 27


State 6

   51 exp: LPARENT • exp RPARENT

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 28


State 7

   24 constant: INTEGER •

    $default  reduce using rule 24 (constant)


State 8

   23 identifier: IDENTIFIER •

    $default  reduce using rule 23 (identifier)


State 9

   25 constant: REAL •

    $default  reduce using rule 25 (constant)


State 10

   26 constant: CHAR •

    $default  reduce using rule 26 (constant)


State 11

   27 constant: STRING •

    $default  reduce using rule 27 (constant)


State 12

   48 exp: '*' • identifier
   49    | '*' • identifier '[' exp ']'

    IDENTIFIER  shift, and go to state 8

    identifier  go to state 29


State 13

    0 $accept: program • $end

    $end  shift, and go to state 30


State 14

    1 program: stmlist •
    3 stmlist: stmlist • stm

    BREAK       shift, and go to state 1
    IF          shift, and go to state 2
    RETURN      shift, and go to state 3
    WHILE       shift, and go to state 4
    FOR         shift, and go to state 5
    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    $default  reduce using rule 1 (program)

    stm         go to state 31
    vardec      go to state 16
    fundec      go to state 17
    identifier  go to state 18
    constant    go to state 19
    exp         go to state 20


State 15

    2 stmlist: stm •

    $default  reduce using rule 2 (stmlist)


State 16

    5 stm: vardec • SEMICOLON

    SEMICOLON  shift, and go to state 32


State 17

    4 stm: fundec •

    $default  reduce using rule 4 (stm)


State 18

   16 vardec: identifier • identifier
   17       | identifier • identifier ASSIGN exp
   18       | identifier • identifier LBRACKET INTEGER RBRACKET
   19 fundec: identifier • identifier LPARENT fun_args RPARENT block
   31 exp: identifier • ASSIGN exp
   32    | identifier • '(' call_args ')'
   45    | identifier • LBRACKET exp RBRACKET
   46    | identifier • LBRACKET exp RBRACKET ASSIGN exp
   47    | identifier •

    ASSIGN      shift, and go to state 33
    LBRACKET    shift, and go to state 34
    IDENTIFIER  shift, and go to state 8
    '('         shift, and go to state 35

    $default  reduce using rule 47 (exp)

    identifier  go to state 36


State 19

   50 exp: constant •

    $default  reduce using rule 50 (exp)


State 20

    6 stm: exp • SEMICOLON
   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND        shift, and go to state 37
    OR         shift, and go to state 38
    LE         shift, and go to state 39
    GE         shift, and go to state 40
    EQ         shift, and go to state 41
    NE         shift, and go to state 42
    SEMICOLON  shift, and go to state 43
    PLUS       shift, and go to state 44
    MINUS      shift, and go to state 45
    MUL        shift, and go to state 46
    DIV        shift, and go to state 47
    LT         shift, and go to state 48
    GT         shift, and go to state 49


State 21

    9 stm: BREAK SEMICOLON •

    $default  reduce using rule 9 (stm)


State 22

   10 stm: IF LPARENT • exp RPARENT block
   11    | IF LPARENT • exp RPARENT block ELSE block

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 50


State 23

    7 stm: RETURN SEMICOLON •

    $default  reduce using rule 7 (stm)


State 24

   31 exp: identifier • ASSIGN exp
   32    | identifier • '(' call_args ')'
   45    | identifier • LBRACKET exp RBRACKET
   46    | identifier • LBRACKET exp RBRACKET ASSIGN exp
   47    | identifier •

    ASSIGN    shift, and go to state 33
    LBRACKET  shift, and go to state 34
    '('       shift, and go to state 35

    $default  reduce using rule 47 (exp)


State 25

    8 stm: RETURN exp • SEMICOLON
   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND        shift, and go to state 37
    OR         shift, and go to state 38
    LE         shift, and go to state 39
    GE         shift, and go to state 40
    EQ         shift, and go to state 41
    NE         shift, and go to state 42
    SEMICOLON  shift, and go to state 51
    PLUS       shift, and go to state 44
    MINUS      shift, and go to state 45
    MUL        shift, and go to state 46
    DIV        shift, and go to state 47
    LT         shift, and go to state 48
    GT         shift, and go to state 49


State 26

   12 stm: WHILE LPARENT • exp RPARENT block

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 52


State 27

   13 stm: FOR LPARENT • exp RPARENT block

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 53


State 28

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp
   51    | LPARENT exp • RPARENT

    AND      shift, and go to state 37
    OR       shift, and go to state 38
    LE       shift, and go to state 39
    GE       shift, and go to state 40
    EQ       shift, and go to state 41
    NE       shift, and go to state 42
    RPARENT  shift, and go to state 54
    PLUS     shift, and go to state 44
    MINUS    shift, and go to state 45
    MUL      shift, and go to state 46
    DIV      shift, and go to state 47
    LT       shift, and go to state 48
    GT       shift, and go to state 49


State 29

   48 exp: '*' identifier •
   49    | '*' identifier • '[' exp ']'

    '['  shift, and go to state 55

    $default  reduce using rule 48 (exp)


State 30

    0 $accept: program $end •

    $default  accept


State 31

    3 stmlist: stmlist stm •

    $default  reduce using rule 3 (stmlist)


State 32

    5 stm: vardec SEMICOLON •

    $default  reduce using rule 5 (stm)


State 33

   31 exp: identifier ASSIGN • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 56


State 34

   45 exp: identifier LBRACKET • exp RBRACKET
   46    | identifier LBRACKET • exp RBRACKET ASSIGN exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 57


State 35

   32 exp: identifier '(' • call_args ')'

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    $default  reduce using rule 28 (call_args)

    identifier  go to state 24
    constant    go to state 19
    call_args   go to state 58
    exp         go to state 59


State 36

   16 vardec: identifier identifier •
   17       | identifier identifier • ASSIGN exp
   18       | identifier identifier • LBRACKET INTEGER RBRACKET
   19 fundec: identifier identifier • LPARENT fun_args RPARENT block

    ASSIGN    shift, and go to state 60
    LPARENT   shift, and go to state 61
    LBRACKET  shift, and go to state 62

    $default  reduce using rule 16 (vardec)


State 37

   37 exp: exp AND • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 63


State 38

   38 exp: exp OR • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 64


State 39

   39 exp: exp LE • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 65


State 40

   40 exp: exp GE • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 66


State 41

   41 exp: exp EQ • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 67


State 42

   42 exp: exp NE • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 68


State 43

    6 stm: exp SEMICOLON •

    $default  reduce using rule 6 (stm)


State 44

   33 exp: exp PLUS • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 69


State 45

   34 exp: exp MINUS • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 70


State 46

   35 exp: exp MUL • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 71


State 47

   36 exp: exp DIV • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 72


State 48

   43 exp: exp LT • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 73


State 49

   44 exp: exp GT • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 74


State 50

   10 stm: IF LPARENT exp • RPARENT block
   11    | IF LPARENT exp • RPARENT block ELSE block
   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND      shift, and go to state 37
    OR       shift, and go to state 38
    LE       shift, and go to state 39
    GE       shift, and go to state 40
    EQ       shift, and go to state 41
    NE       shift, and go to state 42
    RPARENT  shift, and go to state 75
    PLUS     shift, and go to state 44
    MINUS    shift, and go to state 45
    MUL      shift, and go to state 46
    DIV      shift, and go to state 47
    LT       shift, and go to state 48
    GT       shift, and go to state 49


State 51

    8 stm: RETURN exp SEMICOLON •

    $default  reduce using rule 8 (stm)


State 52

   12 stm: WHILE LPARENT exp • RPARENT block
   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND      shift, and go to state 37
    OR       shift, and go to state 38
    LE       shift, and go to state 39
    GE       shift, and go to state 40
    EQ       shift, and go to state 41
    NE       shift, and go to state 42
    RPARENT  shift, and go to state 76
    PLUS     shift, and go to state 44
    MINUS    shift, and go to state 45
    MUL      shift, and go to state 46
    DIV      shift, and go to state 47
    LT       shift, and go to state 48
    GT       shift, and go to state 49


State 53

   13 stm: FOR LPARENT exp • RPARENT block
   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND      shift, and go to state 37
    OR       shift, and go to state 38
    LE       shift, and go to state 39
    GE       shift, and go to state 40
    EQ       shift, and go to state 41
    NE       shift, and go to state 42
    RPARENT  shift, and go to state 77
    PLUS     shift, and go to state 44
    MINUS    shift, and go to state 45
    MUL      shift, and go to state 46
    DIV      shift, and go to state 47
    LT       shift, and go to state 48
    GT       shift, and go to state 49


State 54

   51 exp: LPARENT exp RPARENT •

    $default  reduce using rule 51 (exp)


State 55

   49 exp: '*' identifier '[' • exp ']'

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 78


State 56

   31 exp: identifier ASSIGN exp •
   33    | exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 31 (exp)]
    OR        [reduce using rule 31 (exp)]
    LE        [reduce using rule 31 (exp)]
    GE        [reduce using rule 31 (exp)]
    EQ        [reduce using rule 31 (exp)]
    NE        [reduce using rule 31 (exp)]
    PLUS      [reduce using rule 31 (exp)]
    MINUS     [reduce using rule 31 (exp)]
    MUL       [reduce using rule 31 (exp)]
    DIV       [reduce using rule 31 (exp)]
    LT        [reduce using rule 31 (exp)]
    GT        [reduce using rule 31 (exp)]
    $default  reduce using rule 31 (exp)


State 57

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp
   45    | identifier LBRACKET exp • RBRACKET
   46    | identifier LBRACKET exp • RBRACKET ASSIGN exp

    AND       shift, and go to state 37
    OR        shift, and go to state 38
    LE        shift, and go to state 39
    GE        shift, and go to state 40
    EQ        shift, and go to state 41
    NE        shift, and go to state 42
    RBRACKET  shift, and go to state 79
    PLUS      shift, and go to state 44
    MINUS     shift, and go to state 45
    MUL       shift, and go to state 46
    DIV       shift, and go to state 47
    LT        shift, and go to state 48
    GT        shift, and go to state 49


State 58

   30 call_args: call_args • COMMA exp
   32 exp: identifier '(' call_args • ')'

    COMMA  shift, and go to state 80
    ')'    shift, and go to state 81


State 59

   29 call_args: exp •
   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    $default  reduce using rule 29 (call_args)


State 60

   17 vardec: identifier identifier ASSIGN • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 82


State 61

   19 fundec: identifier identifier LPARENT • fun_args RPARENT block

    IDENTIFIER  shift, and go to state 8

    $default  reduce using rule 20 (fun_args)

    vardec      go to state 83
    fun_args    go to state 84
    identifier  go to state 85


State 62

   18 vardec: identifier identifier LBRACKET • INTEGER RBRACKET

    INTEGER  shift, and go to state 86


State 63

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   37    | exp AND exp •
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 37 (exp)]
    OR        [reduce using rule 37 (exp)]
    LE        [reduce using rule 37 (exp)]
    GE        [reduce using rule 37 (exp)]
    EQ        [reduce using rule 37 (exp)]
    NE        [reduce using rule 37 (exp)]
    PLUS      [reduce using rule 37 (exp)]
    MINUS     [reduce using rule 37 (exp)]
    MUL       [reduce using rule 37 (exp)]
    DIV       [reduce using rule 37 (exp)]
    LT        [reduce using rule 37 (exp)]
    GT        [reduce using rule 37 (exp)]
    $default  reduce using rule 37 (exp)


State 64

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   38    | exp OR exp •
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 38 (exp)]
    OR        [reduce using rule 38 (exp)]
    LE        [reduce using rule 38 (exp)]
    GE        [reduce using rule 38 (exp)]
    EQ        [reduce using rule 38 (exp)]
    NE        [reduce using rule 38 (exp)]
    PLUS      [reduce using rule 38 (exp)]
    MINUS     [reduce using rule 38 (exp)]
    MUL       [reduce using rule 38 (exp)]
    DIV       [reduce using rule 38 (exp)]
    LT        [reduce using rule 38 (exp)]
    GT        [reduce using rule 38 (exp)]
    $default  reduce using rule 38 (exp)


State 65

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   39    | exp LE exp •
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 39 (exp)]
    OR        [reduce using rule 39 (exp)]
    LE        [reduce using rule 39 (exp)]
    GE        [reduce using rule 39 (exp)]
    EQ        [reduce using rule 39 (exp)]
    NE        [reduce using rule 39 (exp)]
    PLUS      [reduce using rule 39 (exp)]
    MINUS     [reduce using rule 39 (exp)]
    MUL       [reduce using rule 39 (exp)]
    DIV       [reduce using rule 39 (exp)]
    LT        [reduce using rule 39 (exp)]
    GT        [reduce using rule 39 (exp)]
    $default  reduce using rule 39 (exp)


State 66

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   40    | exp GE exp •
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 40 (exp)]
    OR        [reduce using rule 40 (exp)]
    LE        [reduce using rule 40 (exp)]
    GE        [reduce using rule 40 (exp)]
    EQ        [reduce using rule 40 (exp)]
    NE        [reduce using rule 40 (exp)]
    PLUS      [reduce using rule 40 (exp)]
    MINUS     [reduce using rule 40 (exp)]
    MUL       [reduce using rule 40 (exp)]
    DIV       [reduce using rule 40 (exp)]
    LT        [reduce using rule 40 (exp)]
    GT        [reduce using rule 40 (exp)]
    $default  reduce using rule 40 (exp)


State 67

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   41    | exp EQ exp •
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 41 (exp)]
    OR        [reduce using rule 41 (exp)]
    LE        [reduce using rule 41 (exp)]
    GE        [reduce using rule 41 (exp)]
    EQ        [reduce using rule 41 (exp)]
    NE        [reduce using rule 41 (exp)]
    PLUS      [reduce using rule 41 (exp)]
    MINUS     [reduce using rule 41 (exp)]
    MUL       [reduce using rule 41 (exp)]
    DIV       [reduce using rule 41 (exp)]
    LT        [reduce using rule 41 (exp)]
    GT        [reduce using rule 41 (exp)]
    $default  reduce using rule 41 (exp)


State 68

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   42    | exp NE exp •
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 42 (exp)]
    OR        [reduce using rule 42 (exp)]
    LE        [reduce using rule 42 (exp)]
    GE        [reduce using rule 42 (exp)]
    EQ        [reduce using rule 42 (exp)]
    NE        [reduce using rule 42 (exp)]
    PLUS      [reduce using rule 42 (exp)]
    MINUS     [reduce using rule 42 (exp)]
    MUL       [reduce using rule 42 (exp)]
    DIV       [reduce using rule 42 (exp)]
    LT        [reduce using rule 42 (exp)]
    GT        [reduce using rule 42 (exp)]
    $default  reduce using rule 42 (exp)


State 69

   33 exp: exp • PLUS exp
   33    | exp PLUS exp •
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 33 (exp)]
    OR        [reduce using rule 33 (exp)]
    LE        [reduce using rule 33 (exp)]
    GE        [reduce using rule 33 (exp)]
    EQ        [reduce using rule 33 (exp)]
    NE        [reduce using rule 33 (exp)]
    PLUS      [reduce using rule 33 (exp)]
    MINUS     [reduce using rule 33 (exp)]
    MUL       [reduce using rule 33 (exp)]
    DIV       [reduce using rule 33 (exp)]
    LT        [reduce using rule 33 (exp)]
    GT        [reduce using rule 33 (exp)]
    $default  reduce using rule 33 (exp)


State 70

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   34    | exp MINUS exp •
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 34 (exp)]
    OR        [reduce using rule 34 (exp)]
    LE        [reduce using rule 34 (exp)]
    GE        [reduce using rule 34 (exp)]
    EQ        [reduce using rule 34 (exp)]
    NE        [reduce using rule 34 (exp)]
    PLUS      [reduce using rule 34 (exp)]
    MINUS     [reduce using rule 34 (exp)]
    MUL       [reduce using rule 34 (exp)]
    DIV       [reduce using rule 34 (exp)]
    LT        [reduce using rule 34 (exp)]
    GT        [reduce using rule 34 (exp)]
    $default  reduce using rule 34 (exp)


State 71

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   35    | exp MUL exp •
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 35 (exp)]
    OR        [reduce using rule 35 (exp)]
    LE        [reduce using rule 35 (exp)]
    GE        [reduce using rule 35 (exp)]
    EQ        [reduce using rule 35 (exp)]
    NE        [reduce using rule 35 (exp)]
    PLUS      [reduce using rule 35 (exp)]
    MINUS     [reduce using rule 35 (exp)]
    MUL       [reduce using rule 35 (exp)]
    DIV       [reduce using rule 35 (exp)]
    LT        [reduce using rule 35 (exp)]
    GT        [reduce using rule 35 (exp)]
    $default  reduce using rule 35 (exp)


State 72

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   36    | exp DIV exp •
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 36 (exp)]
    OR        [reduce using rule 36 (exp)]
    LE        [reduce using rule 36 (exp)]
    GE        [reduce using rule 36 (exp)]
    EQ        [reduce using rule 36 (exp)]
    NE        [reduce using rule 36 (exp)]
    PLUS      [reduce using rule 36 (exp)]
    MINUS     [reduce using rule 36 (exp)]
    MUL       [reduce using rule 36 (exp)]
    DIV       [reduce using rule 36 (exp)]
    LT        [reduce using rule 36 (exp)]
    GT        [reduce using rule 36 (exp)]
    $default  reduce using rule 36 (exp)


State 73

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   43    | exp LT exp •
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 43 (exp)]
    OR        [reduce using rule 43 (exp)]
    LE        [reduce using rule 43 (exp)]
    GE        [reduce using rule 43 (exp)]
    EQ        [reduce using rule 43 (exp)]
    NE        [reduce using rule 43 (exp)]
    PLUS      [reduce using rule 43 (exp)]
    MINUS     [reduce using rule 43 (exp)]
    MUL       [reduce using rule 43 (exp)]
    DIV       [reduce using rule 43 (exp)]
    LT        [reduce using rule 43 (exp)]
    GT        [reduce using rule 43 (exp)]
    $default  reduce using rule 43 (exp)


State 74

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp
   44    | exp GT exp •

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 44 (exp)]
    OR        [reduce using rule 44 (exp)]
    LE        [reduce using rule 44 (exp)]
    GE        [reduce using rule 44 (exp)]
    EQ        [reduce using rule 44 (exp)]
    NE        [reduce using rule 44 (exp)]
    PLUS      [reduce using rule 44 (exp)]
    MINUS     [reduce using rule 44 (exp)]
    MUL       [reduce using rule 44 (exp)]
    DIV       [reduce using rule 44 (exp)]
    LT        [reduce using rule 44 (exp)]
    GT        [reduce using rule 44 (exp)]
    $default  reduce using rule 44 (exp)


State 75

   10 stm: IF LPARENT exp RPARENT • block
   11    | IF LPARENT exp RPARENT • block ELSE block

    LBRACE  shift, and go to state 87

    block  go to state 88


State 76

   12 stm: WHILE LPARENT exp RPARENT • block

    LBRACE  shift, and go to state 87

    block  go to state 89


State 77

   13 stm: FOR LPARENT exp RPARENT • block

    LBRACE  shift, and go to state 87

    block  go to state 90


State 78

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp
   49    | '*' identifier '[' exp • ']'

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49
    ']'    shift, and go to state 91


State 79

   45 exp: identifier LBRACKET exp RBRACKET •
   46    | identifier LBRACKET exp RBRACKET • ASSIGN exp

    ASSIGN  shift, and go to state 92

    $default  reduce using rule 45 (exp)


State 80

   30 call_args: call_args COMMA • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 93


State 81

   32 exp: identifier '(' call_args ')' •

    $default  reduce using rule 32 (exp)


State 82

   17 vardec: identifier identifier ASSIGN exp •
   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    $default  reduce using rule 17 (vardec)


State 83

   22 fun_args: vardec •

    $default  reduce using rule 22 (fun_args)


State 84

   19 fundec: identifier identifier LPARENT fun_args • RPARENT block
   21 fun_args: fun_args • COMMA vardec

    COMMA    shift, and go to state 94
    RPARENT  shift, and go to state 95


State 85

   16 vardec: identifier • identifier
   17       | identifier • identifier ASSIGN exp
   18       | identifier • identifier LBRACKET INTEGER RBRACKET

    IDENTIFIER  shift, and go to state 8

    identifier  go to state 96


State 86

   18 vardec: identifier identifier LBRACKET INTEGER • RBRACKET

    RBRACKET  shift, and go to state 97


State 87

   14 block: LBRACE • stmlist RBRACE
   15      | LBRACE • RBRACE

    BREAK       shift, and go to state 1
    IF          shift, and go to state 2
    RETURN      shift, and go to state 3
    WHILE       shift, and go to state 4
    FOR         shift, and go to state 5
    RBRACE      shift, and go to state 98
    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    stmlist     go to state 99
    stm         go to state 15
    vardec      go to state 16
    fundec      go to state 17
    identifier  go to state 18
    constant    go to state 19
    exp         go to state 20


State 88

   10 stm: IF LPARENT exp RPARENT block •
   11    | IF LPARENT exp RPARENT block • ELSE block

    ELSE  shift, and go to state 100

    $default  reduce using rule 10 (stm)


State 89

   12 stm: WHILE LPARENT exp RPARENT block •

    $default  reduce using rule 12 (stm)


State 90

   13 stm: FOR LPARENT exp RPARENT block •

    $default  reduce using rule 13 (stm)


State 91

   49 exp: '*' identifier '[' exp ']' •

    $default  reduce using rule 49 (exp)


State 92

   46 exp: identifier LBRACKET exp RBRACKET ASSIGN • exp

    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    identifier  go to state 24
    constant    go to state 19
    exp         go to state 101


State 93

   30 call_args: call_args COMMA exp •
   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    $default  reduce using rule 30 (call_args)


State 94

   21 fun_args: fun_args COMMA • vardec

    IDENTIFIER  shift, and go to state 8

    vardec      go to state 102
    identifier  go to state 85


State 95

   19 fundec: identifier identifier LPARENT fun_args RPARENT • block

    LBRACE  shift, and go to state 87

    block  go to state 103


State 96

   16 vardec: identifier identifier •
   17       | identifier identifier • ASSIGN exp
   18       | identifier identifier • LBRACKET INTEGER RBRACKET

    ASSIGN    shift, and go to state 60
    LBRACKET  shift, and go to state 62

    $default  reduce using rule 16 (vardec)


State 97

   18 vardec: identifier identifier LBRACKET INTEGER RBRACKET •

    $default  reduce using rule 18 (vardec)


State 98

   15 block: LBRACE RBRACE •

    $default  reduce using rule 15 (block)


State 99

    3 stmlist: stmlist • stm
   14 block: LBRACE stmlist • RBRACE

    BREAK       shift, and go to state 1
    IF          shift, and go to state 2
    RETURN      shift, and go to state 3
    WHILE       shift, and go to state 4
    FOR         shift, and go to state 5
    RBRACE      shift, and go to state 104
    LPARENT     shift, and go to state 6
    INTEGER     shift, and go to state 7
    IDENTIFIER  shift, and go to state 8
    REAL        shift, and go to state 9
    CHAR        shift, and go to state 10
    STRING      shift, and go to state 11
    '*'         shift, and go to state 12

    stm         go to state 31
    vardec      go to state 16
    fundec      go to state 17
    identifier  go to state 18
    constant    go to state 19
    exp         go to state 20


State 100

   11 stm: IF LPARENT exp RPARENT block ELSE • block

    LBRACE  shift, and go to state 87

    block  go to state 105


State 101

   33 exp: exp • PLUS exp
   34    | exp • MINUS exp
   35    | exp • MUL exp
   36    | exp • DIV exp
   37    | exp • AND exp
   38    | exp • OR exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • EQ exp
   42    | exp • NE exp
   43    | exp • LT exp
   44    | exp • GT exp
   46    | identifier LBRACKET exp RBRACKET ASSIGN exp •

    AND    shift, and go to state 37
    OR     shift, and go to state 38
    LE     shift, and go to state 39
    GE     shift, and go to state 40
    EQ     shift, and go to state 41
    NE     shift, and go to state 42
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MUL    shift, and go to state 46
    DIV    shift, and go to state 47
    LT     shift, and go to state 48
    GT     shift, and go to state 49

    AND       [reduce using rule 46 (exp)]
    OR        [reduce using rule 46 (exp)]
    LE        [reduce using rule 46 (exp)]
    GE        [reduce using rule 46 (exp)]
    EQ        [reduce using rule 46 (exp)]
    NE        [reduce using rule 46 (exp)]
    PLUS      [reduce using rule 46 (exp)]
    MINUS     [reduce using rule 46 (exp)]
    MUL       [reduce using rule 46 (exp)]
    DIV       [reduce using rule 46 (exp)]
    LT        [reduce using rule 46 (exp)]
    GT        [reduce using rule 46 (exp)]
    $default  reduce using rule 46 (exp)


State 102

   21 fun_args: fun_args COMMA vardec •

    $default  reduce using rule 21 (fun_args)


State 103

   19 fundec: identifier identifier LPARENT fun_args RPARENT block •

    $default  reduce using rule 19 (fundec)


State 104

   14 block: LBRACE stmlist RBRACE •

    $default  reduce using rule 14 (block)


State 105

   11 stm: IF LPARENT exp RPARENT block ELSE block •

    $default  reduce using rule 11 (stm)
